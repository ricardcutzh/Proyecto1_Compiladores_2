options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = false;
  IGNORE_CASE = true;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
}

PARSER_BEGIN(XLSParser)
package Analizadores;
import ASTTree.ASTNode;
import ManejoError.TError;
import java.util.ArrayList;
import Abstract.*;
import Tablas.*;

public class XLSParser {
    int id;
    final int PUNTOCOMA = 3;
    String imgError = "";
	
	//LISTA DE ERRORES
	ArrayList<TError> errores;
	TablaSimbolos simbolos;
	
    String extractText(String text)
    {
        text = text.replace("<<", "");
        text = text.replace(">>", "");
        return text;
    }
	
	String extractExpre(String text)
    {
        text = text.replace("'", "");
        return text;
    }
	
	public ArrayList<TError> getErrores()
	{
		return this.errores;
	}

}

PARSER_END(XLSParser)
//ERROR
JAVACODE
void skip_error_recovery(int kind, String archivo, String columna)
{
    //ParseException e = generateParseException();  // generaste the exception object.
	String ti = "Lexico";
	String m = "Caracter desconocido: ";
	Token to = getToken(1);
	if(to.kind != XLSParserConstants.err)
	{
		ti = "Sintactico";
		m = "No se esperaba: ";
		to = getToken(0);
	}
	if(to.kind == XLSParserConstants.cKey)
	{
		ti = "Sintactico";
		m = "Se esperaba la finalizacion de un Grupo o Ciclo";
		errores.add(new TError(ti,m,columna,archivo));
		return;
	}
    //System.out.println("Caracter No admitido en "+archivo+", Columna: "+columna+" : "+to.image);  // print the error message
	errores.add(new TError(ti,m+to.image,columna,archivo));
    Token t;
    do {
        t = getNextToken();
		if(t.kind == 0){break;}
    } while (t.kind != kind || t.kind != 0);
}
//PUNTUACION
TOKEN:
{
     <oKey: "{">//{//System.out.println("Token: "+image);}
    |<cKey: "}">//{//System.out.println("Token: "+image);}
    |<ptComa: ";">//{System.out.println("Token: "+image);} // ES EL 3
    |<nll: "NULL">//{System.out.println("Token: "+image);}
    |<dPts: ":">//{System.out.println("Token: "+image);}
	|<oBrack: "[">
	|<cBrack: "]">
	|<coma: ",">
}
//PALABRAS RESERVADAS CONFIGURACIONES
TOKEN:
{
     <titulo_form: "titulo_formulario">//{System.out.println("Token: "+image);}
    |<idform: "idform">//{System.out.println("Token: "+image);}
    |<estilo: "estilo">//{System.out.println("Token: "+image);}
    |<importa: "import">//{System.out.println("Token: "+image);}
    |<codigo_gl: "codigo_global">//{System.out.println("Token: "+image);}
    |<codigo_pr: "codigo_principal">//{System.out.println("Token: "+image);}
    |<conf: "_config">//{System.out.println("Token: "+image);}
	|<pag: "pagina">
	|<tod: "todo">
	|<cuadricu: "cuadricula">
}
//PALABRAS RESERVADAS PARA OPCIONES
TOKEN:
{
	 <opcions: "_opciones">
}
//PALABRAS RESERVADAS PARA ENCUESTA
TOKEN:
{
	 <pregu: "_pregunta">
	|<encus: "_Encuesta">
	|<tipo: "tipo">
	|<idpregu: "idpregunta">
	|<etiqueta: "etiqueta">
	|<sugerir: "sugerir">
	|<requerido: "requerido">
	|<requeridomsn: "requeridomsn">
	|<pordefecto: "pordefecto">
	|<lectura: "lectura">
	|<calculo: "calculo">
	|<multimedia: "multimedia">
	|<restringir: "restringir">
	|<restringirmsn: "restringirmsn">
	|<codigo_pre: "codigo_pre">
	|<codigo_post: "codigo_post">
	|<aplicable: "aplicable">
	|<apariencia: "apariencia">
	|<parametro: "parametro">
	|<verdadero: "verdadero">
	|<repeticion: "repeticion">
	|<falso: "falso">
	|<uno: "1">
	|<cero: "0">
	|<texto: "texto">
	|<entero: "entero">
	|<decimal: "decimal">
	|<rango: "rango">
	|<condicion: "condicion">
	|<fecha: "fecha">
	|<hora: "hora">
	|<fechahora: "fechahora">
	|<sel_un: "selecciona_uno">
	|<sel_mul: "selecciona_multiples">
	|<nota: "nota">
	|<fichero: "fichero">
	|<calcular: "calcular">
	|<grupo: "_grupo">
	|<fin: "_fin">
	|<ciclo: "_ciclo">
}
//LOS TOKENS QUE VA A IGNORAR
SKIP:
{
    " " | "\n" | "\r" | "\r\n" | "\t" 
}
//EXPRESIONES REGULARES HASTA ABAJO
TOKEN:
{
     <identificador: ["a"-"z","A"-"Z"](["a"-"z","A"-"Z","_","0"-"9"])*>
    //|<texto_pl: "<<" ( (~["<",">"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* ">>">
	|<texto_pl: "<<" ( (~["<",">"]) | ("\\" ( ["n","t","b","r","f","\\","\""] ) ) )* ">>">
	|<texto_ex: "\'" ( (~["\'","\\"]) | ("\\" ( ["n","t","b","r","f","\\","\'"] ) ) )* "\'">
    |<err: (~[])>
}
//SYNTAXIS DEL LENGUAJE

// INICIO ::= CONFIG OPCIONES ENCUESTA
ASTNode INICIO():
{
    //AQUI VAN A IR LOS HIJOS DE ESTE METODO
    id = 0;
    ASTNode padre = new ASTNode(id, 0, 0, "INICIO");
    id++;
    ASTNode confi;
	ASTNode ops;
	ASTNode enc;
	errores = new ArrayList();
	
}
{
    //LLAMADA A LOS DEMAS
	try{
    confi = CONFIG()
	ops = OPCIONES()
	enc = ENCUESTA()
	
    //AREA DE RETURN
    {
        //AQUI VA A IR EL RETORNO DEL PADRE
        padre.addHijo(confi);
		padre.addHijo(ops);
		padre.addHijo(enc);
        return padre;
    }
	}
	catch(ParseException e)
	{
		return new ASTNode(id, 0,0, "error1");
	}
}
void EMPTY():
{}
{
	//PRODUCCION VACIA
	{
		System.out.println("VACIO");
	}
}
//-----------------------------------------------------------------------------------------------|
//---------------------- COFIG Y SUS PRDOUCCIONES------------------------------------------------|
//-----------------------------------------------------------------------------------------------|
ASTNode CONFIG():
{
    //AQUI VAN A IR LOS HIJOS DE ESTE METODO
	id++;
    ASTNode padre = new ASTNode(id, 0, 0, "CONFIG");
    
    ASTNode titulof, idf, stl, imp, cglo, cpr;
}
{
    <conf> //_config
    <oKey> //{

    titulof = TITULO()
    { padre.addHijo(titulof); }

    idf = IDFORM()
    { padre.addHijo(idf); }
    
    stl = ESTILO()
    { padre.addHijo(stl); }

    imp = IMPOR()
    { padre.addHijo(imp); }

    cglo = CGLOBAL()
    { padre.addHijo(cglo); }
    
    cpr = CPRIN()
    { padre.addHijo(cpr); }
    
    <cKey>//}
    {
        return padre;
    }
	
	|
	
	EMPTY()
	{
		return padre; 
	}
}

ASTNode TITULO():
{
    id++;
    ASTNode padre = new ASTNode(id, 0, 0, "TITULO");
    
    ASTNode tit;
}
{
    try
    {
        <titulo_form> <dPts> tit = TF("Configuraciones","titulo_formulario") <ptComa>
        {
            padre.addHijo(tit);
            return padre;
        }
    }
    catch(ParseException e)
    {
        //LLAMADA AL TOKEN DE RECUPERACION
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "titulo_formulario");//hasta que encuentre el punto y coma
        return padre;
    }
}

ASTNode TF(String hoja, String columna):
{
    Token t;
}
{
    try
    {
        t = <texto_pl>
        {
            id++;
            return new ASTNode(id,0,0,extractText(t.image));
        }
    }
    catch(ParseException e)
    {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", columna);//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        return new ASTNode(id, 0,0,"_ERR");
    }
        |
    try
    {
        t = <nll>
        {
            id++;
            return new ASTNode(id,0,0,t.image);
        }
    }
    catch(ParseException e)
    {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", columna);//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        return new ASTNode(id, 0,0,"_ERR");
    }
}

ASTNode IDFORM():
{
    id++;
    ASTNode padre = new ASTNode(id, 0, 0, "IDFORM");
    
    ASTNode idf;
}
{
    try
    {
        <idform> <dPts> idf = IDF() <ptComa>
        {
            padre.addHijo(idf);
            return padre;
        }
    }
    catch(ParseException e)
    {
        //LLAMADA AL TOKEN DE RECUPERACION
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "idformulario_");//hasta que encuentre el punto y coma
        return padre;
    }
}

ASTNode IDF():
{
    Token t;
}
{
    try
    {
        t = <identificador>
        {
            id++;
            return new ASTNode(id,0,0,t.image);
        }
    }
    catch(ParseException e)
    {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "idform");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        return new ASTNode(id, 0,0,"_ERR");
    }
        |
    try
    {
        t = <nll>
        {
            id++;
            return new ASTNode(id,0,0,t.image);
        }
    }
    catch(ParseException e)
    {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "idform");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        return new ASTNode(id, 0,0,"_ERR");
    }
}

ASTNode ESTILO():
{
	id++;
	ASTNode padre = new ASTNode(id, 0,0, "ESTILO");
	ASTNode est;
}
{
	try
	{
		<estilo> <dPts> est = EST() <ptComa>
		{
			padre.addHijo(est);
			return padre;
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo: Solo Pagina, Cuadricula, Todo");
		return padre;
	}
}

ASTNode EST():
{
	Token t;
}
{
	try
	{
		t = <tod>
		{
			id++;
			return new ASTNode(id, 0,0, t.image);
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo: Solo Pagina, Cuadricula, Todo");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
		id++;
		return new ASTNode(id, 0,0,"_ERR");
	}
	|
	try
	{
		t = <pag>
		{
			id++;
			return new ASTNode(id, 0,0, t.image);
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo: Solo Pagina, Cuadricula, Todo");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
		id++;
		return new ASTNode(id, 0,0,"_ERR");
	}
	|
	try
	{
		t = <cuadricu>
		{
			id++;
			return new ASTNode(id, 0,0, t.image);
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo: Solo Pagina, Cuadricula, Todo");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
		id++;
		return new ASTNode(id, 0,0,"_ERR");
	}
}


ASTNode IMPOR():
{
	id++;
	ASTNode padre = new ASTNode(id, 0,0, "IMPORTA");
	Token t;
}
{
	try
	{
		<importa> <dPts> t = <texto_pl> <ptComa>
		{
			id++;
			padre.addHijo(new ASTNode(id,0,0, extractText(t.image)));
			return padre;
		}
 	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Configuraciones", "importar");//hasta que encuentre el punto y coma
        return padre;
	}
}

ASTNode CGLOBAL():
{
	id++;
	ASTNode padre = new ASTNode(id, 0,0, "GLOBAL");
	ASTNode temp;
}
{
	try
	{
		<codigo_gl> <dPts> temp = TF("Configuraciones","codigo_global") <ptComa>
		{
			padre.addHijo(temp);
			return padre;
		}
 	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Configuraciones", "codigo_global");//hasta que encuentre el punto y coma
        return padre;
	}
}

ASTNode CPRIN():
{
	id++;
	ASTNode padre = new ASTNode(id, 0,0, "PRINCIPAL");
	ASTNode temp;
}
{
	try
	{
		<codigo_pr> <dPts> temp = TF("Configuraciones","codigo_principal") <ptComa>
		{
			padre.addHijo(temp);
			return padre;
		}
 	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Configuraciones", "codigo_principal");//hasta que encuentre el punto y coma
        return padre;
	}
}
//-----------------------------------------------------------------------------------------------|
//---------------------- OPCIONES Y SUS PRDOUCCIONES---------------------------------------------|
//-----------------------------------------------------------------------------------------------|
ASTNode OPCIONES():
{
	id++;
	ASTNode padre = new ASTNode(id,0,0,"OPCIONES");
	ASTNode lopcs;
}
{
	try
	{
		<opcions>//_opciones
		<oKey>//{
		lopcs = L_OPCS()
		{
			padre.addHijo(lopcs);
		}
		<cKey>//}
		{
			return padre;
		}
	}
	catch(ParseException e)
	{
		return padre;
	}
	
}

ASTNode L_OPCS():
{
	id++;
	ASTNode padre = new ASTNode(id,0,0,"L_OPCS");
	ASTNode opcs;
	ASTNode l_opcs;
}
{
	opcs = OPCS()
	{padre.addHijo(opcs);}
	l_opcs = L_OPCS()
	{
		padre.addHijo(l_opcs);
		return padre;
	}
	
	|
	EMPTY()
	{
		return padre;
	}
}

ASTNode OPCS():
{
	id++;
	ASTNode padre = new ASTNode(id,0,0,"OPCS");
	Token t;
	ASTNode l_entrada;
}
{
	try
	{
		t = <identificador> <oKey> l_entrada = L_ENT() <cKey> <ptComa>
		{
			id++;
			padre.addHijo(new ASTNode(id,0,0,t.image));
			padre.addHijo(l_entrada);
			return padre;
		}
		|
		<nll>
		{
			//AQUI MENCIONAR EL ERROR DE LISTA
			skip_error_recovery(PUNTOCOMA, "Opciones", "nombre_lista");
			errores.add(new TError("Sintactico","Nombre de listado Invalido: NULL | Se esperaba un Id", "nombre_lista", "Opciones"));
			return padre;
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Opciones", "nombre_lista");//hasta que encuentre el punto y coma
		return padre;
	}
}

ASTNode L_ENT():
{
	id++;
	ASTNode padre = new ASTNode(id,0,0,"L_ENT");
	ASTNode ent;
	ASTNode l_ent;
}
{
	ent = ENT()
	l_ent = L_ENT()
	{	
		padre.addHijo(ent); 
		padre.addHijo(l_ent);
		return padre;
	}
	|
	EMPTY()
	{return padre;}
}

ASTNode ENT():
{
	id++;
	ASTNode padre = new ASTNode(id,0,0,"ENT");
	Token iden;
	Token cad;
	ASTNode mult;
}
{
	try
	{
		<oBrack> iden = <identificador> <coma> cad = <texto_pl> <coma> mult = TF("Opciones","multimedia") <cBrack>
		{
			id++;
			padre.addHijo(new ASTNode(id,0,0,iden.image));
			id++;
			padre.addHijo(new ASTNode(id,0,0,extractText(cad.image)));
			padre.addHijo(mult);
			return padre;
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Opciones", "nombre");//hasta que encuentre el punto y coma
		return padre;
	}
}
//-----------------------------------------------------------------------------------------------|
//---------------------- ENCUESTA Y SUS PRDOUCCIONES---------------------------------------------|
//-----------------------------------------------------------------------------------------------|
ASTNode ENCUESTA():
{
	id++;
	ASTNode padre = new ASTNode(id,0,0,"ENCUESTA");
	simbolos = new TablaSimbolos();
	Formulario f = new Formulario();
}
{
	<encus> <oKey>
	f = ENCUESTAP(f)
	<cKey>
	{
		padre.setForm(f);
		this.simbolos.printCountElements();
		return padre;
	}
	
}

Formulario ENCUESTAP(Formulario f):
{
	Pregunta p;
	Grupo g;
	Ciclo c;
}
{
	p = PREGUNTA() 
	{
		if(p!=null)
		{
			f.addPregunta(p);
		}
	}
	f = ENCUESTAP(f)
	{
		return f;
	}
	| g = GRUPO()
	{
		if(g!=null)
		{
			f.addGrupo(g);
		}
	}
	f = ENCUESTAP(f)
	{
		return f;
	}
	
	| c = CICLO()
	{
		if(c!=null)
		{
			f.addCiclo(c);
		}
	}
	f = ENCUESTAP(f)
	{
		return f;
	}
	
	|EMPTY()
	{
		return f;
	}
}

Pregunta PREGUNTA():
{
	int ti;
	Token iden;
	Token cad;
	Pregunta aux;
	String aux1 = "";
}
{
	try
	{
		<pregu> <oKey> <tipo> <dPts>  ti = TIPO() <ptComa> <idpregu> <dPts> iden = <identificador>{ aux1 = iden.image;} <ptComa> <etiqueta> <dPts> cad = <texto_pl> <ptComa>
		{
			//CREO LA PREGUNTA
			Pregunta p = new Pregunta(iden.image, extractText(cad.image), ti);
		}
		aux = OTROS(p)
		{
			//OBTENGO LA PREGUNTA Y LA DEVUELVO
			p = aux;
		}
		<cKey>
		{
			if(simbolos.insertaEnTabla(iden.image, new Simbolo(iden.image, "Pregunta", p)))
			{
				return p;
			}
			this.errores.add(new TError("Semantico", "Existe ya un Simbolo con este identificador: "+iden.image,"idpregunta", "Encuesta"));
			return null;
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", "idpregunta: "+aux1+", etiqueta");
		return null;
	}
}

int TIPO():
{
	
}
{
	try
	{
		 <texto>
		 {return TipoPregunta.TEXTO;}
		
		|<entero>
		{return TipoPregunta.ENTERO;}
		
		|<decimal>
		{return TipoPregunta.DECIMAL;}
		
		|<rango>
		{return TipoPregunta.RANGO;}
		
		|<condicion>
		{return TipoPregunta.CONDICION;}
		
		|<fecha>
		{return TipoPregunta.FECHA;}
		
		|<hora>
		{return TipoPregunta.HORA;}
		
		|<fechahora>
		{return TipoPregunta.FECHAHORA;}
		
		|<sel_un> <identificador> //AQUI FALTA SABER QUIEN ES QUIEN VA A SELECCIONAR DE OPCIONES
		{return TipoPregunta.SELEC_UNO;}
		
		|<sel_mul> <identificador> //AQUI FALTA DE SABER QUIEN VA A SELECCIONAR DE LAS OPCIONES
		{return TipoPregunta.SELEC_MULT;}
		
		|<nota>
		{return TipoPregunta.NOTA;}
		
		|<fichero>
		{return TipoPregunta.FICHERO;}
		
		|<calcular>
		{return TipoPregunta.CALCULAR;}
		
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA,"Encuesta", "Tipo");
		return 14;
	}
}

Pregunta OTROS(Pregunta p):
{
	Pregunta pe;
	boolean b;
	Token t;
	String apa;
	String atributo ="";
}
{
	try
	{
		<sugerir> {atributo = p.getIdpregunta()+", sugerir";} <dPts> t = <texto_pl> <ptComa> 
		{ 
			/*ANADIR AQUI!*/   
			if(!p.addAtributo(new Sugerencia(extractText(t.image)),"sugerir"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: Sugerir","Sugerir","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			 return pe;
		}
		|<requerido> {atributo = p.getIdpregunta()+", requerido";} <dPts> b = BOOLEANO(atributo) <ptComa> 
		{
			/*ANADIR AQUI!*/ 
			if(!p.addAtributo( new Requerido(String.valueOf(b), b),"requerido"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: Requerido","Requerido","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<requeridomsn> {atributo = p.getIdpregunta() + ", requeridomsn";} <dPts> t = <texto_pl> <ptComa> 
		{
			/*ANADIR AQUI!*/ 
			if(!p.addAtributo(new RequeridoMsn(extractText(t.image)),"requeridomsn"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: RequeridoMsn","RequeridoMsn","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<pordefecto> {atributo = p.getIdpregunta() + ", pordefecto";} <dPts> t = <texto_ex> <ptComa> 
		{ 
			/*ANADIR AQUI!*/
			if(!p.addAtributo(new PorDefecto(extractExpre(t.image)),"pordefecto"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: PorDefecto","PorDefecto","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<lectura> {atributo = p.getIdpregunta() + ", lectura";} <dPts>  b = BOOLEANO(atributo) <ptComa> 
		{ 
			/*ANADIR AQUI!*/ 
			if(!p.addAtributo(new Lectura(String.valueOf(b), b),"lectura"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: Lectura","Lectura","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<calculo> {atributo = p.getIdpregunta() + ", calculo";} <dPts> t = <texto_ex> <ptComa> 
		{ 
			/*ANADIR AQUI!*/ 
			if(!p.addAtributo(new Calculo(extractExpre(t.image)),"calculo"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: Calculo","Calculo","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<multimedia> {atributo = p.getIdpregunta() + ", multimedia";} <dPts> t = <texto_pl> <ptComa> 
		{ 
			/*ANADIR AQUI!*/
			if(!p.addAtributo(new Multimedia(extractText(t.image)),"multimedia"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: Multimedia","Multimedia","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<restringir> {atributo = p.getIdpregunta() + ", restringir";} <dPts> t = <texto_ex> <ptComa> 
		{ 
			/*ANADIR AQUI!*/
			if(!p.addAtributo(new Restringir(extractExpre(t.image)),"restringir"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<restringirmsn> {atributo = p.getIdpregunta() + ", restringirmsn";} <dPts> t = <texto_pl> <ptComa> 
		{ 
			/*ANADIR AQUI!*/ 
			if(!p.addAtributo(new RestringirMsn(extractText(t.image)),"restringirmsn"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<codigo_pre> {atributo = p.getIdpregunta() + ", codigo_pre";} <dPts> t = <texto_pl> <ptComa> 
		{ 
			/*ANADIR AQUI!*/
			if(!p.addAtributo(new CodigoPre(extractText(t.image)),"codigo_pre"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<codigo_post> {atributo = p.getIdpregunta() + ", codigo_post";} <dPts> t = <texto_pl> <ptComa> 
		{ 
			/*ANADIR AQUI!*/ 
			if(!p.addAtributo( new CodigoPost(extractText(t.image)), "codigo_post"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<aplicable> {atributo = p.getIdpregunta() + ", aplicable";} <dPts> t = <texto_ex> <ptComa> 
		{
			/*ANADIR AQUI*/
			if(!p.addAtributo(new Aplicable(extractExpre(t.image)),"aplicable"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<repeticion> {atributo = p.getIdpregunta() + ", repeticion";} <dPts>  t = <texto_ex> <ptComa> 
		{ 
			/*ANADIR AQUI!*/
			if(!p.addAtributo(new Repeticion(extractExpre(t.image)),"repeticion"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<apariencia> {atributo = p.getIdpregunta() + ", apariencia";} <dPts> apa = APARIENCIA(atributo) <ptComa> 
		{ 
			/*ANADIR AQUI!*/
			if(!p.addAtributo(new Apariencia(apa),"apariencia"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		|<parametro> {atributo = p.getIdpregunta() + ", parametro";} <dPts> t = <texto_pl> <ptComa> 
		{ 
			/*ANADIR AQUI!*/
			if(!p.addAtributo(new Parametro(extractExpre(t.image)),"parametro"))
			{
				this.errores.add(new TError("Semantico", "Columna ya declarada anteriormente: ","","Encuesta"));
			}
		} 
		pe = OTROS(p)
		{
			return pe;
		}
		| EMPTY()
		{
			return p;
		}
	}	
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", atributo);
		return OTROS(p);
	}
}

boolean BOOLEANO(String col):
{
	
}
{
	try
	{
		 <verdadero> {return true;}
		|<falso> {return false;}
		|<uno> {return true;}
		|<cero> {return false;}
	}
	catch(ParseException p)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", col);
		return false;
	}
}

String APARIENCIA(String col):
{
	
}
{
	try
	{
		 <pag>{return "Pagina";}
		|<tod>{return "Todo";}
		|<cuadricu>{return "Cuadricula";}
	}
	catch(ParseException p)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", col);
		return "";
	}
}


//----------------------------------------GRUPOS-----------------------------------------------------------------------
Grupo GRUPO():
{
	Token iden;
	Token iden2;
	Token et;
	Aplicable ap;
	Grupo padre;
	String aux="";
}
{
	try{
		
	<grupo> <oKey>
	
	<idpregu> <dPts> iden = <identificador> {aux = iden.image;} <ptComa>
	
	<etiqueta> <dPts> et = <texto_pl> <ptComa>
	
	ap = APLICABLE("Grupo: "+iden.image)
	
	{
		Grupo g = new Grupo(iden.image,extractText(et.image));
		if(ap!=null)
		{
			g.setAplicable(ap);
		}
	}
	
	padre = CUERPOG(g)
	
	<fin> <dPts> iden2 = <identificador> <ptComa>
	
	{
		if(!iden.image.equals(iden2.image))
		{
			this.errores.add(new TError("Semantico", "No se ha cerrado el grupo: "+iden.image,"finalizar Agrupacion", "Encuesta"));
			return null;
		}
	}
	
	<cKey>
	
	{
		//ANADO A LA TABLA DE SIMBOLOS
		if(simbolos.insertaEnTabla(iden.image,new Simbolo(iden.image, "Grupo", padre)))
		{
			return padre;
		}
		this.errores.add(new TError("Semantico", "Existe ya un Grupo con este identificador: "+iden.image,"idpregunta", "Encuesta"));
		return null;
	}
	
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", "Grupo: "+aux+" | idpregunta, Finalizar Ciclo");
		return null;
	}
}


Aplicable APLICABLE(String grupoCiclo):
{
	Token t;
}
{
	try
	{
		<aplicable> <dPts> t = <texto_ex> <ptComa> 
		{
			return new Aplicable(extractExpre(t.image));
		}
		|EMPTY()
		{
			return null;
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", grupoCiclo+": Aplicable");
		return null;
	}
}

Grupo CUERPOG(Grupo g):
{
	Pregunta p;
	Grupo g1;
	Ciclo c;
}
{
	p = PREGUNTA()
	{
		if(p!=null)
		{
			g.addPregunta(p);
		}
	}
	g = CUERPOG(g)
	{
		return g;
	}
	|g1 = GRUPO()  
	{
		if(g1!=null)
		{
			g.addGrupo(g1);
		}
	} 
	g = CUERPOG(g)
	{
		return g;
	}
	
	| c = CICLO()
	{
		if(c!=null)
		{
			g.addCiclo(c);
		}
	}
	g = CUERPOG(g)
	{
		return g;
	}
	
	| EMPTY()
	{
		return g;
	}
}

//------------------------------------------------------------CICLOS!--------------------------------------------------------------
Ciclo CICLO():
{
	String aux = "";
	Token ide;
	Token ide2;
	Ciclo padre;
	Aplicable ap;
	Repeticion rep;
}
{
	try
	{
		<ciclo> <oKey>
		
		<idpregu> <dPts> ide = <identificador> {aux = ide.image;} <ptComa>
		
		ap = APLICABLE("Ciclo: "+ide.image)
		{
			Ciclo c = new Ciclo(ide.image, "No Aplica");
			if(ap!=null)
			{
				c.setApli(ap);
			}
		}
		
		rep = REPETICION("Ciclo: "+ide.image)
		{
			if(rep!=null)
			{
				c.setRep(rep);
			}
		}
		
		padre = CUERPOC(c)
		
		<fin> <dPts> ide2 =  <identificador> <ptComa>
		{
			if(!ide.image.equals(ide2.image))
			{
				this.errores.add(new TError("Semantico", "No se ha cerrado el Ciclo: "+ide.image,"finalizar Ciclo", "Encuesta"));
				return null;
			}
		}
		<cKey>
		{
			//INSERTO EN TABLA DE SIMBOLOS Y RETORNO
			if(simbolos.insertaEnTabla(ide.image,new Simbolo(ide.image, "Ciclo", padre)))
			{
				return padre;
			}
			this.errores.add(new TError("Semantico", "Existe ya un Ciclo con este identificador: "+ide.image,"idpregunta", "Encuesta"));
			return null;
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", "Ciclo: "+aux+" | fin de ciclo o identificador invalido");
		return null;
	}
}

Repeticion REPETICION(String grupoCiclo):
{
	Token t;
}
{
	try
	{
		<repeticion> <dPts> t = <texto_ex> <ptComa> 
		{
			return new Repeticion(extractExpre(t.image));
		}
		|EMPTY()
		{
			return null;
		}
	}
	catch(ParseException e)
	{
		skip_error_recovery(PUNTOCOMA, "Encuesta", grupoCiclo+": Aplicable");
		return null;
	}
}

Ciclo CUERPOC(Ciclo c):
{
	Pregunta p;
	Ciclo c1;
	Grupo g1;
}
{
	p = PREGUNTA()
	{
		if(p!=null)
		{
			c.addPregunta(p);
		}
	}
	c = CUERPOC(c)
	{
		return c;
	}
	
	|g1 = GRUPO()  
	{
		if(g1!=null)
		{
			c.addGrupo(g1);
		}
	} 
	c = CUERPOC(c)
	{
		return c;
	}
	
	|c1 = CICLO()
	{
		if(c1!=null)
		{
			c.addCiclo(c1);
		}
	}
	c = CUERPOC(c)
	{
		return c;
	}
	
	| EMPTY()
	{
		return c;
	}
}






















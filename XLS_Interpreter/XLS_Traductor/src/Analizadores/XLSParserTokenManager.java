/* Generated By:JavaCC: Do not edit this line. XLSParserTokenManager.java */
package Analizadores;
import ASTTree.ASTNode;
import ManejoError.TError;
import java.util.ArrayList;
import Abstract.*;
import Tablas.*;

/** Token Manager. */
public class XLSParserTokenManager implements XLSParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1fff3ffffc77e10L) != 0L)
         {
            jjmatchedKind = 65;
            return 1;
         }
         return -1;
      case 1:
         if ((active0 & 0x1fff3ffffc77e10L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1fff3ffffc77e10L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 2;
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x1bbf3ffff857e00L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x44000000420010L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x1b161ffff857e00L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0xa920000000000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0x1b941ffff846200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x200000011c00L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x80400062000000L) != 0L)
            return 1;
         if ((active0 & 0x13901ff9d846200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 6;
            return 1;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000001000000L) != 0L)
            return 1;
         if ((active0 & 0x3901ff9c846200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
            return 1;
         }
         return -1;
      case 8:
         if ((active0 & 0x900d00c000000L) != 0L)
            return 1;
         if ((active0 & 0x30012f90846200L) != 0L)
         {
            if (jjmatchedPos != 8)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 8;
            }
            return 1;
         }
         return -1;
      case 9:
         if ((active0 & 0x12790840000L) != 0L)
            return 1;
         if ((active0 & 0x30000808006200L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 65;
               jjmatchedPos = 9;
            }
            return 1;
         }
         return -1;
      case 10:
         if ((active0 & 0x800000000L) != 0L)
            return 1;
         if ((active0 & 0x30000208006200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 10;
            return 1;
         }
         return -1;
      case 11:
         if ((active0 & 0x8000000L) != 0L)
            return 1;
         if ((active0 & 0x30000200006200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 11;
            return 1;
         }
         return -1;
      case 12:
         if ((active0 & 0x200002000L) != 0L)
            return 1;
         if ((active0 & 0x30000000004200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 12;
            return 1;
         }
         return -1;
      case 13:
         if ((active0 & 0x10000000000000L) != 0L)
            return 1;
         if ((active0 & 0x20000000004200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 13;
            return 1;
         }
         return -1;
      case 14:
         if ((active0 & 0x20000000004200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 14;
            return 1;
         }
         return -1;
      case 15:
         if ((active0 & 0x4000L) != 0L)
            return 1;
         if ((active0 & 0x20000000000200L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 15;
            return 1;
         }
         return -1;
      case 16:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 16;
            return 1;
         }
         if ((active0 & 0x200L) != 0L)
            return 1;
         return -1;
      case 17:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 17;
            return 1;
         }
         return -1;
      case 18:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 18;
            return 1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x8000000000000000L);
      case 44:
         return jjStopAtPos(0, 8);
      case 48:
         return jjStopAtPos(0, 43);
      case 49:
         return jjStopAtPos(0, 42);
      case 58:
         return jjStopAtPos(0, 5);
      case 59:
         return jjStopAtPos(0, 3);
      case 91:
         return jjStopAtPos(0, 6);
      case 93:
         return jjStopAtPos(0, 7);
      case 95:
         return jjMoveStringLiteralDfa1_0(0xe00000000388000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x3000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x101000c40046000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x200001000800L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x8a020000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x801400L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x20000000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x40000000000010L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x4010010000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x81030c000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x30000002000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000420200L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x8000000000L);
      case 123:
         return jjStopAtPos(0, 1);
      case 125:
         return jjStopAtPos(0, 2);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 63);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x100824040010000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000008000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x800400L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x3a51832c200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000400200L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x45000c100a6000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x800L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x82040010L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000040000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x8a400020000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00026000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x2010000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000001000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1300210c0000010L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000c81000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0xc000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20400c010100000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x40200000000a00L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 1);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 54, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x900000040280000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x1008010040000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x30210002100000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x8a000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x401c00016800L);
      case 76:
      case 108:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 4, 1);
         break;
      case 78:
      case 110:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(3, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 79:
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 1);
         else if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x1400L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x1003a0000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000c000200L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x8008000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x30001000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000001c800000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00106000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x1002080080000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000a00L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x404000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 79:
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 1);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 44, 1);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 1);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x200302041400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000061200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(5, 16, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x401000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x31000000000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x6001200000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10302048000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000040000000L);
      case 77:
      case 109:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000L);
      case 79:
      case 111:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 11, 1);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 45, 1);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(5, 57);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(5, 59);
         return jjMoveStringLiteralDfa6_0(active0, 0xc00086200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000002c000000L);
      case 84:
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 12, 1);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00006200L);
      case 65:
      case 97:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(6, 29, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000040000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x8090000000L);
      case 71:
      case 103:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(6, 15);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x3100000c000000L);
      case 76:
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 46, 1);
         break;
      case 78:
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x2300180000L);
      case 79:
      case 111:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(6, 30, 1);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000L);
      case 82:
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(6, 25, 1);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x4001000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(7, 24, 1);
         break;
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2010000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x8c000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x300002000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x31000000000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0xc00004000L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 56, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x800c000000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x300000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(8, 20);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(8, 21);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 51, 1);
         break;
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 36, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x2380000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x42000L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 48, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x30000000000000L);
      case 79:
      case 111:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 8;
         }
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 38, 1);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 1);
         return jjMoveStringLiteralDfa9_0(active0, 0x10808000200L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x400004000L);
      case 83:
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(8, 19);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x10800000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 18, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(9, 23, 1);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 1);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 37, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x30000000000000L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(9, 34, 1);
         break;
      case 73:
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 78:
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 40, 1);
         break;
      case 79:
      case 111:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(9, 28, 1);
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 82:
      case 114:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 9;
         }
         return jjMoveStringLiteralDfa10_0(active0, 0x200000200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa11_0(active0, 0x30000000000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000200L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(10, 35, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x2000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x20000000000000L);
      case 78:
      case 110:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(11, 27, 1);
         break;
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000200L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x4000L);
      case 76:
      case 108:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(12, 13, 1);
         return jjMoveStringLiteralDfa13_0(active0, 0x200L);
      case 78:
      case 110:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(12, 33, 1);
         return jjMoveStringLiteralDfa13_0(active0, 0x10000000000000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, 0L);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0x20000000000000L);
      case 79:
      case 111:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 52, 1);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, 0L);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa15_0(active0, 0x4000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x200L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0, 0L);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 73:
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000000000200L);
      case 76:
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(15, 14, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, active0, 0L);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, 0L);
      return 16;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(16, 9, 1);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, 0L);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0, 0L);
      return 17;
   }
   switch(curChar)
   {
      case 76:
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0, 0L);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0, 0L);
      return 18;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0, 0L);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0, 0L);
      return 19;
   }
   switch(curChar)
   {
      case 83:
      case 115:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 53, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(18, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 14;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 2:
                  if (curChar == 60)
                     jjCheckNAddStates(3, 5);
                  break;
               case 3:
                  if ((0xafffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 5:
                  if (curChar == 34)
                     jjCheckNAddStates(3, 5);
                  break;
               case 6:
                  if (curChar == 62 && kind > 66)
                     kind = 66;
                  break;
               case 7:
                  if (curChar == 62)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 9:
               case 12:
                  if (curChar == 39)
                     jjCheckNAddStates(0, 2);
                  break;
               case 10:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 13:
                  if (curChar == 39 && kind > 67)
                     kind = 67;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 65)
                     kind = 65;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  jjCheckNAddStates(3, 5);
                  break;
               case 4:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 5:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 10:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 11:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 12:
                  if ((0x14404410144044L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(3, 5);
                  break;
               case 10:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 14 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   10, 11, 13, 3, 4, 7, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\173", "\175", "\73", null, "\72", "\133", "\135", "\54", null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, "\61", "\60", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xfffffffffffffffL, 0x1eL, 
};
static final long[] jjtoSkip = {
   0xf000000000000000L, 0x1L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[14];
private final int[] jjstateSet = new int[28];
protected char curChar;
/** Constructor. */
public XLSParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public XLSParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 14; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 68)
   {
      jjmatchedKind = 68;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

/* Generated By:JavaCC: Do not edit this line. XLSParser.java */
package Analizadores;
import java.io.StringReader;
import ASTTree.ASTNode;

public class XLSParser implements XLSParserConstants {
    int id;
    final int PUNTOCOMA = 3;
    String imgError = "";
    String extractText(String text)
    {
        text = text.replace("<<", "");
        text = text.replace(">>", "");
        return text;
    }

  void skip_error_recovery(int kind, String archivo, String columna) throws ParseException {
    //ParseException e = generateParseException();  // generate the exception object.
    System.out.println("Caracter No admitido en "+archivo+", Columna: "+columna+" : "+getToken(1).image);  // print the error message
    Token t;
    do {
        t = getNextToken();
    } while (t.kind != kind);
  }

//SYNTAXIS DEL LENGUAJE

// INICIO ::= CONFIG OPCIONES ENCUESTA
  final public ASTNode INICIO() throws ParseException {
    //AQUI VAN A IR LOS HIJOS DE ESTE METODO
    id = 0;
    ASTNode padre = new ASTNode(id, 0, 0, "INICIO");
    id++;
    ASTNode confi;
    //LLAMADA A LOS DEMAS
        confi = CONFIG();
        //AQUI VA A IR EL RETORNO DEL PADRE
        padre.addHijo(confi);
        {if (true) return padre;}
    throw new Error("Missing return statement in function");
  }

//------------------------------------------------------------------------------
  final public ASTNode CONFIG() throws ParseException {
    //AQUI VAN A IR LOS HIJOS DE ESTE METODO
    ASTNode padre = new ASTNode(id, 0, 0, "CONFIG");
    id++;
    ASTNode titulof, idf, stl, imp, cglo, cpr;
    jj_consume_token(conf);
    jj_consume_token(oKey);
    //{
    
        titulof = TITULO();
      padre.addHijo(titulof);
    idf = IDFORM();
      padre.addHijo(idf);
    stl = ESTILO();
      padre.addHijo(stl);
    imp = IMPOR();
      padre.addHijo(imp);
    cglo = CGLOBAL();
      padre.addHijo(cglo);
    cpr = CPRIN();
      padre.addHijo(cpr);
    jj_consume_token(cKey);
        {if (true) return padre;}
    throw new Error("Missing return statement in function");
  }

  final public ASTNode TITULO() throws ParseException {
    id++;
    ASTNode padre = new ASTNode(id, 0, 0, "TITULO");

    ASTNode tit;
    try {
      jj_consume_token(titulo_form);
      jj_consume_token(dPts);
      tit = TF("titulo_formulario");
      jj_consume_token(ptComa);
            padre.addHijo(tit);
            {if (true) return padre;}
    } catch (ParseException e) {
        //LLAMADA AL TOKEN DE RECUPERACION
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "titulo_formulario");//hasta que encuentre el punto y coma
        {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode TF(String columna) throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case texto_pl:
      try {
        t = jj_consume_token(texto_pl);
            id++;
            {if (true) return new ASTNode(id,0,0,extractText(t.image));}
      } catch (ParseException e) {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", columna);//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        {if (true) return new ASTNode(id, 0,0,"_ERR");}
      }
      break;
    case nll:
      try {
        t = jj_consume_token(nll);
            id++;
            {if (true) return new ASTNode(id,0,0,t.image);}
      } catch (ParseException e) {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", columna);//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        {if (true) return new ASTNode(id, 0,0,"_ERR");}
      }
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode IDFORM() throws ParseException {
    id++;
    ASTNode padre = new ASTNode(id, 0, 0, "IDFORM");

    ASTNode idf;
    try {
      jj_consume_token(idform);
      jj_consume_token(dPts);
      idf = IDF();
      jj_consume_token(ptComa);
            padre.addHijo(idf);
            {if (true) return padre;}
    } catch (ParseException e) {
        //LLAMADA AL TOKEN DE RECUPERACION
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "idformulario_");//hasta que encuentre el punto y coma
        {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode IDF() throws ParseException {
    Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case identificador:
      try {
        t = jj_consume_token(identificador);
            id++;
            {if (true) return new ASTNode(id,0,0,t.image);}
      } catch (ParseException e) {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "idform");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        {if (true) return new ASTNode(id, 0,0,"_ERR");}
      }
      break;
    case nll:
      try {
        t = jj_consume_token(nll);
            id++;
            {if (true) return new ASTNode(id,0,0,t.image);}
      } catch (ParseException e) {
        skip_error_recovery(PUNTOCOMA, "Configuraciones", "idform");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
        id++;
        {if (true) return new ASTNode(id, 0,0,"_ERR");}
      }
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode ESTILO() throws ParseException {
        id++;
        ASTNode padre = new ASTNode(id, 0,0, "ESTILO");
        ASTNode est;
    try {
      jj_consume_token(estilo);
      jj_consume_token(dPts);
      est = EST();
      jj_consume_token(ptComa);
                        padre.addHijo(est);
                        {if (true) return padre;}
    } catch (ParseException e) {
                skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo");
                {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode EST() throws ParseException {
        Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case tod:
      try {
        t = jj_consume_token(tod);
                        id++;
                        {if (true) return new ASTNode(id, 0,0, t.image);}
      } catch (ParseException e) {
                skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
                id++;
                {if (true) return new ASTNode(id, 0,0,"_ERR");}
      }
      break;
    case pag:
      try {
        t = jj_consume_token(pag);
                        id++;
                        {if (true) return new ASTNode(id, 0,0, t.image);}
      } catch (ParseException e) {
                skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
                id++;
                {if (true) return new ASTNode(id, 0,0,"_ERR");}
      }
      break;
    case cuadricu:
      try {
        t = jj_consume_token(cuadricu);
                        id++;
                        {if (true) return new ASTNode(id, 0,0, t.image);}
      } catch (ParseException e) {
                skip_error_recovery(PUNTOCOMA, "Configuraciones", "estilo");//HASTA QUE ENCUENTRE EL PUNTO Y COMA
                id++;
                {if (true) return new ASTNode(id, 0,0,"_ERR");}
      }
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode IMPOR() throws ParseException {
        id++;
        ASTNode padre = new ASTNode(id, 0,0, "IMPORTA");
        Token t;
    try {
      jj_consume_token(importa);
      jj_consume_token(dPts);
      t = jj_consume_token(texto_pl);
      jj_consume_token(ptComa);
                        id++;
                        padre.addHijo(new ASTNode(id,0,0, extractText(t.image)));
                        {if (true) return padre;}
    } catch (ParseException e) {
                skip_error_recovery(PUNTOCOMA, "Configuraciones", "importar");//hasta que encuentre el punto y coma
        {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode CGLOBAL() throws ParseException {
        id++;
        ASTNode padre = new ASTNode(id, 0,0, "GLOBAL");
        ASTNode temp;
    try {
      jj_consume_token(codigo_gl);
      jj_consume_token(dPts);
      temp = TF("codigo_global");
      jj_consume_token(ptComa);
                        padre.addHijo(temp);
                        {if (true) return padre;}
    } catch (ParseException e) {
                skip_error_recovery(PUNTOCOMA, "Configuraciones", "codigo_global");//hasta que encuentre el punto y coma
        {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

  final public ASTNode CPRIN() throws ParseException {
        id++;
        ASTNode padre = new ASTNode(id, 0,0, "PRINCIPAL");
        ASTNode temp;
    try {
      jj_consume_token(codigo_pr);
      jj_consume_token(dPts);
      temp = TF("codigo_principal");
      jj_consume_token(ptComa);
                        padre.addHijo(temp);
                        {if (true) return padre;}
    } catch (ParseException e) {
                skip_error_recovery(PUNTOCOMA, "Configuraciones", "codigo_principal");//hasta que encuentre el punto y coma
        {if (true) return padre;}
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public XLSParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400010,0x200010,0xe000,};
   }

  /** Constructor with InputStream. */
  public XLSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XLSParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XLSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public XLSParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XLSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public XLSParser(XLSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(XLSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[24];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 24; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}

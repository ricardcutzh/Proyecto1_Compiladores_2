/* Generated By:JavaCC: Do not edit this line. MultimediaParser.java */
package MParser;
import ManejoError.TError;
import java.util.ArrayList;
import Tablas.*;
import Abstract.*;
public class MultimediaParser implements MultimediaParserConstants {
        ArrayList<TError> errores;
        TablaSimbolos ts;
        String columna; //LA COLUMNA QUE ESTOY TRADUCIENDO
        String archivo; //ESTE SIEMPRE SERA ENCUESTA
        String idPreguntaActual;
        String idPadre;
        ArrayList<String> params;

        //ARRAYLIST DE LOS PARAMETROS QUE VIENEN EN LA PREGUNTA AL LLAMARLA DESDE EL FORM
        ArrayList<String> paramsPadre;

        int type;
        String tipoCalcular = "";

        //PARAMETROS DE LA MULTIMEDIA
        public String tipoMedia = "";
        public String ruta = "";
        public String repro = "Falso";

        //CADENA PARAMETROS
        public String cadenaMax = "Nada",CadenaMin = "Nada",Fila = "Nada";
        ///////////////////

        //RANGO PARAMETROS
        public String init = "0", finit = "0";
        //////////////////

        //CONDICION
        public String v = "Si", f = "No";
        //////////////////

        public void setUp(ArrayList<TError> errores, TablaSimbolos ts, String padre, String actual, String columna, String archivo, int tipo)
        {
                this.errores = errores;
                this.ts = ts;
                this.idPadre =padre;
                this.idPreguntaActual = actual;
                this.columna = columna;
                this.archivo = archivo;
                this.params = new ArrayList();
                this.paramsPadre = new ArrayList();
                this.type = tipo;
        }

        String devuelvemeID(String id)
        {
                String aux = id;
                aux = aux.replace("#[","");
                aux = aux.replace("]","");
                return aux;
        }

        public ArrayList<String> getParamsPadre()
        {
                return this.paramsPadre;
        }

        public ArrayList<String> getParams()
        {
                return this.params;
        }
        public String getTipoCalcular()
        {
                return this.tipoCalcular;
        }

        String obtTipoAltoNivel(int tipo)
        {
                switch(tipo)
                {
                        case TipoPregunta.ENTERO:
                        {
                                return "Entero";
                        }
                        case TipoPregunta.TEXTO:
                        {
                                return "Cadena";
                        }
                        case TipoPregunta.DECIMAL:
                        {
                                return "Decimal";
                        }
                        case TipoPregunta.RANGO:
                        {
                                return "Entero";
                        }
                        case TipoPregunta.CONDICION:
                        {
                                return "Booelano";
                        }
                        case TipoPregunta.FECHA:
                        {
                                return "Fecha";
                        }
                        case TipoPregunta.HORA:
                        {
                                return "Hora";
                        }
                        case TipoPregunta.FECHAHORA:
                        {
                                return "FechaHora";
                        }
                        case TipoPregunta.SELEC_MULT:
                        {
                                return "Cadena";
                        }
                        case TipoPregunta.SELEC_UNO:
                        {
                                return "Cadena";
                        }
                        case TipoPregunta.NOTA:
                        {
                                return "Cadena";
                        }
                        case TipoPregunta.FICHERO:
                        {
                                return "Cadena";
                        }
                        case TipoPregunta.CALCULAR:
                        {
                                return "Decimal";
                        }
                }
                return "";
        }

  void skip_error_recovery(int kind, String archivo, String columna) throws ParseException {
        errores.add(new TError("Sintactico","Error en la columna: "+columna,columna+", Posible declaracion de Identificador con espacios dentro, o caracter no reconocido: "+getToken(0).image,archivo+" | Pregunta: "+this.idPreguntaActual));
        Token t;
        do {
        t = getNextToken();
                if(t.kind == 0){break;}
    } while (t.kind != 0);
  }

//GRAMARTICA
  final public void INIT() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case media_aud:
        jj_consume_token(media_aud);
                              this.tipoMedia = "Audio";
        LISTA();
        break;
      case media_vid:
        jj_consume_token(media_vid);
                              this.tipoMedia = "Video";
        LISTA();
        break;
      case media_im:
        jj_consume_token(media_im);
                             this.tipoMedia = "Imagen";
        LISTA();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
    }
  }

  final public void LISTA() throws ParseException {
        String cadena = "";
        Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case reproduccion:
        jj_consume_token(reproduccion);
        jj_consume_token(igual);
        cadena = S();
                                                     this.repro = cadena;
        LISTA();
        break;
      case str1:
        t = jj_consume_token(str1);
                             this.ruta = t.image;
        LISTA();
        break;
      default:
        jj_la1[1] = jj_gen;
        EMPTY();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
    }
  }

  final public void EMPTY() throws ParseException {
                //VACIO
                System.out.println("VACIO");
  }

  final public String S() throws ParseException {
        String cadena = "";
    try {
      cadena = E(cadena);
                        {if (true) return cadena;}
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////E////////////////////////////////////////////////////////////////////////
  final public String E(String cadena) throws ParseException {
        String aux = "";
    try {
      cadena = T(cadena);
      cadena = EP1(cadena);
                        {if (true) return cadena;}
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String EP(String cadena) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
        jj_consume_token(and);
                        cadena += "&&";
        cadena = T(cadena);
                         this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      case or:
        jj_consume_token(or);
                       cadena += "||";
        cadena = T(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String EP1(String cadena) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case and:
      case or:
        cadena = EP(cadena);
        cadena = EP1(cadena);
                         {if (true) return cadena;}
        break;
      default:
        jj_la1[3] = jj_gen;
        EMPTY();
                        {if (true) return cadena;}
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

/////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////T/////////////////////////////////////////////////////////////////////////////////
  final public String T(String cadena) throws ParseException {
    try {
      cadena = F(cadena);
      cadena = TP1(cadena);
                        {if (true) return cadena;}
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String TP(String cadena) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igual:
        jj_consume_token(igual);
                         cadena += "==";
        cadena = F(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      case diferente:
        jj_consume_token(diferente);
                              cadena += "!=";
        cadena = F(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      case menor:
        jj_consume_token(menor);
                          cadena += "<";
        cadena = F(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      case mayor:
        jj_consume_token(mayor);
                          cadena += ">";
        cadena = F(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      case mayorigual:
        jj_consume_token(mayorigual);
                               cadena += ">=";
        cadena = F(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      case menorigual:
        jj_consume_token(menorigual);
                               cadena += "<=";
        cadena = F(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String TP1(String cadena) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case igual:
      case diferente:
      case mayor:
      case menor:
      case mayorigual:
      case menorigual:
        cadena = TP(cadena);
        cadena = TP1(cadena);
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[5] = jj_gen;
        EMPTY();
                        {if (true) return cadena;}
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////F/////////////////////////////////////////////////////////////////////////////////////
  final public String F(String cadena) throws ParseException {
    try {
      cadena = G(cadena);
      cadena = FP1(cadena);
                        {if (true) return cadena;}
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String FP(String cadena) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
        jj_consume_token(mas);
                       cadena += "+";
        cadena = G(cadena);
                        {if (true) return cadena;}
        break;
      case menos:
        jj_consume_token(menos);
                          cadena += "-";
        cadena = G(cadena);
                        {if (true) return cadena;}
        break;
      case por:
        jj_consume_token(por);
                         cadena += "*";
        cadena = G(cadena);
                        {if (true) return cadena;}
        break;
      case div:
        jj_consume_token(div);
                        cadena += "/";
        cadena = G(cadena);
                        {if (true) return cadena;}
        break;
      case pot:
        jj_consume_token(pot);
                        cadena += "^";
        cadena = G(cadena);
                        {if (true) return cadena;}
        break;
      case mod:
        jj_consume_token(mod);
                        cadena += "%";
        cadena = G(cadena);
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String FP1(String cadena) throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case mas:
      case menos:
      case por:
      case div:
      case mod:
      case pot:
        cadena = FP(cadena);
        cadena = FP1(cadena);
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[7] = jj_gen;
        EMPTY();
                        {if (true) return cadena;}
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return "";}
    }
    throw new Error("Missing return statement in function");
  }

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////G///////////////////////////////////////////////////////////////////////////////////
  final public String G(String cadena) throws ParseException {
        Token t;
        String auxiliar = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case identificador:
        t = jj_consume_token(identificador);
                        //AUN DEBO DE PENSAR EN LAS ACCIONES COMO DEBE DE SER
                        String aux = devuelvemeID(t.image);
                        if(this.type == 0)
                        {
                                if(this.ts.existeElemento(aux.toLowerCase()))
                                {
                                        //ACA SE HACE EL 
                                        Simbolo sim = this.ts.getSimbolo(aux);
                                        String papaSim = sim.getPadre();
                                        papaSim = "";
                                        if(!papaSim.equals("")) {papaSim += "().";}
                                        if(sim.getElemento() instanceof Pregunta)
                                        {
                                                Pregunta p = (Pregunta)sim.getElemento();//CASTEO A PREGUNTA
                                                String tipo = obtTipoAltoNivel(p.getTipo()); //OBTENGO EL TIPO
                                                this.params.add(tipo+" "+aux);//ANADO A LOS PARAMETROS QUE NECESITA LA PREGUNTA
                                                if(this.tipoCalcular.equals(""))
                                                {
                                                        this.tipoCalcular = tipo;
                                                }
                                                //////ANADIENDO A PARAMETROS LOCALES
                                                this.paramsPadre.add(papaSim +aux+"().Respuesta");
                                                /////////////////////////////////////
                                                cadena += aux;
                                        }
                                }
                                else
                                {
                                        this.errores.add(new TError("Semantico", "Se hace referencia a una pregunta que no existe: "+aux,columna,archivo));
                                        cadena += "";
                                }
                        }
                        else
                        {
                                if(this.ts.existeElemento(aux.toLowerCase()))
                                {
                                        Simbolo  sim = this.ts.getSimbolo(aux);
                                        if(sim.getElemento() instanceof Pregunta)
                                        {
                                                Pregunta p = (Pregunta)sim.getElemento();//CASTEO A PREGUNTA

                                                if(this.tipoCalcular.equals(""))
                                                {
                                                        this.tipoCalcular = obtTipoAltoNivel(p.getTipo());
                                                }

                                                String pad = sim.getPadre();
                                                pad = "";
                                                if(!pad.equals(""))
                                                {
                                                        pad +="().";
                                                }
                                                cadena += pad+aux+".Respuesta";
                                        }
                                }
                                else
                                {
                                        this.errores.add(new TError("Semantico", "Se hace referencia a una pregunta que no existe: "+aux,columna,archivo));
                                        cadena += "";
                                }
                        }
                        {if (true) return cadena;}
        break;
      case entero:
        t = jj_consume_token(entero);
                        //ACCIONES
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Entero";
                        }
                        cadena += t.image;
                        {if (true) return cadena;}
        break;
      case decimal:
        t = jj_consume_token(decimal);
                        //ACCIONES
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        cadena += t.image;
                        {if (true) return cadena;}
        break;
      case str1:
        t = jj_consume_token(str1);
                        //ACCIONES
                        cadena += t.image;
                        this.tipoCalcular = "Cadena";
                        {if (true) return cadena;}
        break;
      case str2:
        t = jj_consume_token(str2);
                        //ACCIONES
                        cadena += t.image;
                        this.tipoCalcular = "Cadena";
                        {if (true) return cadena;}
        break;
      case verdadero:
        t = jj_consume_token(verdadero);
                        //ACCIONES
                        cadena += t.image;
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Booleano";
                        }
                        {if (true) return cadena;}
        break;
      case falso:
        t = jj_consume_token(falso);
                        //ACCIONES
                        cadena += t.image;
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Booleano";
                        }
                        {if (true) return cadena;}
        break;
      case fecha:
        t = jj_consume_token(fecha);
                        //ACCIONES
                        cadena += "\u005c""+t.image+"\u005c"";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Fecha";
                        }
                        {if (true) return cadena;}
        break;
      case fechahora:
        t = jj_consume_token(fechahora);
                        //ACCIONES
                        cadena += "\u005c'"+t.image+"\u005c'";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "FechaHora";
                        }
                        {if (true) return cadena;}
        break;
      case f_ahora:
        jj_consume_token(f_ahora);
                             cadena += "ahora";
        jj_consume_token(oPar);
                                                         cadena += "(";
        jj_consume_token(cPar);
                                                                                 cadena += ")";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "FechaHora";
                        }
                        {if (true) return cadena;}
        break;
      case f_hoy:
        jj_consume_token(f_hoy);
                           cadena += "hoy";
        jj_consume_token(oPar);
                                                     cadena += "(";
        jj_consume_token(cPar);
                                                                             cadena += ")";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Fecha";
                        }
                        {if (true) return cadena;}
        break;
      case hora:
        t = jj_consume_token(hora);
                        cadena += "\u005c'"+t.image+"\u005c'";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Hora";
                        }
                        {if (true) return cadena;}
        break;
      case oPar:
        jj_consume_token(oPar);
                          cadena += "(";
        cadena = E(cadena);
        jj_consume_token(cPar);
                                                                     cadena +=")";
                        {if (true) return cadena;}
        break;
      case punto:
        jj_consume_token(punto);
                        if(this.type == 0)
                        {
                                //SOLO AGREGO EL ID DE LA PREGUNTA ACTUAL EN CUESTION EN ESTE CASO ES EL PARAM_1
                                cadena += this.idPreguntaActual;
                                //cadena += "Respuesta";//YA QUE HAGO REFERENCIA A LA MISMA PREGUNTA
                        }
                        else
                        {
                                if(!this.idPadre.equals(""))
                                {
                                        cadena += this.idPadre+"().";
                                }
                                cadena += this.idPreguntaActual+"().Respuesta";
                        }
                        {if (true) return cadena;}
        break;
      case not:
        jj_consume_token(not);
                         cadena += "!";
        cadena = E(cadena);
                        this.tipoCalcular = "Booleano";
                        {if (true) return cadena;}
        break;
      case f_cadena:
        jj_consume_token(f_cadena);
                              cadena += "cadena";
        jj_consume_token(oPar);
                                                           cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                   cadena += auxiliar ;
        jj_consume_token(cPar);
                                                                                                                                 cadena += ")";
                        this.tipoCalcular = "Cadena";
                        {if (true) return cadena;}
        break;
      case f_subcad:
        jj_consume_token(f_subcad);
                              cadena += "subcad";
        jj_consume_token(oPar);
                                                           cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                   cadena += auxiliar ;
        jj_consume_token(coma);
                          cadena += ","; auxiliar = "";
        auxiliar = E(auxiliar);
                                                                                 cadena += auxiliar;
        jj_consume_token(coma);
                          cadena += ","; auxiliar = "";
        auxiliar = E(auxiliar);
                                                                                 cadena += auxiliar;
        jj_consume_token(cPar);
                          cadena += ")";
                        this.tipoCalcular = "Cadena";
                        {if (true) return cadena;}
        break;
      case f_poscad:
        jj_consume_token(f_poscad);
                              cadena += "poscad";
        jj_consume_token(oPar);
                                                           cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                   cadena += auxiliar ;
        jj_consume_token(coma);
                          cadena += ","; auxiliar = "";
        auxiliar = E(auxiliar);
                                                                                 cadena += auxiliar;
        jj_consume_token(cPar);
                          cadena += ")";
                        this.tipoCalcular = "Cadena";
                        {if (true) return cadena;}
        break;
      case f_booleano:
        jj_consume_token(f_booleano);
                                cadena += "booleano";
        jj_consume_token(oPar);
                                                               cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                       cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                                    cadena += ")";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Booleano";
                        }
                        {if (true) return cadena;}
        break;
      case f_entero:
        jj_consume_token(f_entero);
                              cadena += "entero";
        jj_consume_token(oPar);
                                                           cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                   cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                                cadena += ")";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Entero";
                        }
                        {if (true) return cadena;}
        break;
      case f_pow:
        jj_consume_token(f_pow);
                           cadena += "pow";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = E(auxiliar);
                                                                                             cadena += auxiliar;
        jj_consume_token(coma);
                          cadena += ","; auxiliar = "";
        auxiliar = E(auxiliar);
                                                                                 cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                              cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_log:
        jj_consume_token(f_log);
                           cadena += "log";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = E(auxiliar);
                                                                                             cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                          cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_log10:
        jj_consume_token(f_log10);
                             cadena += "log10";
        jj_consume_token(oPar);
                                                         cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                 cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                              cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_abs:
        jj_consume_token(f_abs);
                           cadena += "abs";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = E(auxiliar);
                                                                                             cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                          cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_sin:
        jj_consume_token(f_sin);
                           cadena += "sin";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = E(auxiliar);
                                                                                             cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                          cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_cos:
        jj_consume_token(f_cos);
                           cadena += "cos";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = E(auxiliar);
                                                                                             cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                          cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_tan:
        jj_consume_token(f_tan);
                           cadena += "tan";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = E(auxiliar);
                                                                                             cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                          cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_sqrt:
        jj_consume_token(f_sqrt);
                            cadena += "sqrt";
        jj_consume_token(oPar);
                                                       cadena += "(";
        auxiliar = E(auxiliar);
                                                                                               cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                            cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_pi:
        jj_consume_token(f_pi);
                          cadena += "pi";
        jj_consume_token(oPar);
                                                   cadena += "(";
        jj_consume_token(cPar);
                                                                           cadena += ")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_fecha:
        jj_consume_token(f_fecha);
                             cadena += "fecha";
        jj_consume_token(oPar);
                                                         cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                 cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                              cadena += ")";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Fecha";
                        }
                        {if (true) return cadena;}
        break;
      case f_hora:
        jj_consume_token(f_hora);
                            cadena += "fecha";
        jj_consume_token(oPar);
                                                        cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                             cadena += ")";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "Hora";
                        }
                        {if (true) return cadena;}
        break;
      case f_fechahora:
        jj_consume_token(f_fechahora);
                                 cadena += "fechahora";
        jj_consume_token(oPar);
                                                                 cadena += "(";
        auxiliar = E(auxiliar);
                                                                                                         cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                                      cadena += ")";
                        if(this.tipoCalcular.equals(""))
                        {
                                this.tipoCalcular = "FechaHora";
                        }
                        {if (true) return cadena;}
        break;
      case f_random:
        jj_consume_token(f_random);
                              cadena += "random";
        jj_consume_token(oPar);
                                                           cadena += "(";
        auxiliar = L_EXPRE(auxiliar);
                                                                                                         cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                                      cadena +=")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_min:
        jj_consume_token(f_min);
                           cadena += "min";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = L_EXPRE(auxiliar);
                                                                                                   cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                                cadena +=")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      case f_max:
        jj_consume_token(f_max);
                           cadena += "max";
        jj_consume_token(oPar);
                                                     cadena += "(";
        auxiliar = L_EXPRE(auxiliar);
                                                                                                   cadena += auxiliar;
        jj_consume_token(cPar);
                                                                                                                                cadena +=")";
                        if(this.tipoCalcular.equals("") || this.tipoCalcular.equals("Entero"))
                        {
                                this.tipoCalcular = "Decimal";
                        }
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return"";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String L_EXPRE(String cadena) throws ParseException {
        String auxiliar = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case not:
      case punto:
      case oPar:
      case f_cadena:
      case f_subcad:
      case f_poscad:
      case f_booleano:
      case f_entero:
      case f_pow:
      case f_log:
      case f_log10:
      case f_abs:
      case f_sin:
      case f_cos:
      case f_tan:
      case f_sqrt:
      case f_pi:
      case f_fecha:
      case f_hora:
      case f_fechahora:
      case f_random:
      case f_min:
      case f_max:
      case f_hoy:
      case f_ahora:
      case identificador:
      case entero:
      case decimal:
      case str1:
      case str2:
      case verdadero:
      case falso:
      case fecha:
      case hora:
      case fechahora:
        // L_EXPRE::= E LISTA_E
                        auxiliar = E(auxiliar);
                 cadena += auxiliar; auxiliar = "";
        auxiliar = LISTA_E(auxiliar);
                        cadena += auxiliar;
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[9] = jj_gen;
        EMPTY();
                        {if (true) return cadena;}
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return"";}
    }
    throw new Error("Missing return statement in function");
  }

  final public String LISTA_E(String cadena) throws ParseException {
        String auxiliar = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case coma:
        jj_consume_token(coma);
                        cadena += ",";
        auxiliar = E(auxiliar);
                                                                cadena += auxiliar; auxiliar = "";
        auxiliar = LISTA_E(auxiliar);
                                                                                                                                  cadena += auxiliar;
                        {if (true) return cadena;}
        break;
      default:
        jj_la1[10] = jj_gen;
        EMPTY();
                        {if (true) return cadena;}
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
                {if (true) return"";}
    }
    throw new Error("Missing return statement in function");
  }

  final public void ParseaParametroCadena() throws ParseException {
        String cadena = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case cad_max:
        jj_consume_token(cad_max);
        jj_consume_token(igual);
        cadena = S();
                        this.cadenaMax = cadena;
        ParseaParametroCadena();
        break;
      case cad_min:
        jj_consume_token(cad_min);
        jj_consume_token(igual);
        cadena = S();
                        this.CadenaMin = cadena;
        ParseaParametroCadena();
        break;
      case cad_fila:
        jj_consume_token(cad_fila);
        jj_consume_token(igual);
        cadena = S();
                        this.Fila = cadena;
        ParseaParametroCadena();
        break;
      default:
        jj_la1[11] = jj_gen;
        EMPTY();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
    }
  }

  final public void ParseaParametroRango() throws ParseException {
        String cadena = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case iniciar:
        jj_consume_token(iniciar);
        jj_consume_token(igual);
        cadena = S();
                        this.init = cadena;
        ParseaParametroRango();
        break;
      case finalizar:
        jj_consume_token(finalizar);
        jj_consume_token(igual);
        cadena = S();
                        this.finit = cadena;
        ParseaParametroRango();
        break;
      default:
        jj_la1[12] = jj_gen;
        EMPTY();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
    }
  }

  final public void ParseParametroCondicion() throws ParseException {
    try {
      jj_consume_token(opcion);
      jj_consume_token(igual);
      OV();
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
    }
  }

  final public void OV() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case vf:
        jj_consume_token(vf);
                       this.v = "Verdadero"; this.f = "False";
        break;
      case sino:
        jj_consume_token(sino);
                         this.v = "Si"; this.f = "No";
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
                skip_error_recovery(0, this.archivo, this.columna);
    }
  }

  /** Generated Token Manager. */
  public MultimediaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1c0,0x200,0x1400000,0x1400000,0x3f0000,0x3f0000,0xfc00,0xfc00,0x12800000,0x12800000,0x0,0xc0000000,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xffffef80,0xffffef80,0x40,0x1,0x6,0x18,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0xff,0xff,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public MultimediaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MultimediaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MultimediaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MultimediaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MultimediaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MultimediaParser(MultimediaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MultimediaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[73];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 73; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
